//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/Working/Scripts/Player/PlayerInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputActions"",
    ""maps"": [
        {
            ""name"": ""MovementManagement"",
            ""id"": ""cf70479e-90c3-4a6c-b719-80067da51eed"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""1527dadc-9464-4b29-a0ed-96d53905b275"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""a3a94819-20cc-4415-b5a1-00040e87854c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Run"",
                    ""type"": ""Button"",
                    ""id"": ""1b01568c-9804-42f4-88bb-06d3e3834cc2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MoveOnGrapple"",
                    ""type"": ""Value"",
                    ""id"": ""e311ba16-93be-49f4-87ba-a9dbbeb3be22"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Grapple"",
                    ""type"": ""Button"",
                    ""id"": ""e86556cc-2d0e-42e9-bd74-8c2e54a9a2c6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Dash"",
                    ""type"": ""Button"",
                    ""id"": ""25d2d5e1-a239-4db8-bc82-a19a067529ac"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""f2cdd810-8ee8-4129-9eeb-24fffddc1904"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": ""NormalizeVector2"",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""7291c99c-4a57-4034-afc2-a7db885e6370"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""6031945c-05ce-4030-bec1-e0d23c469050"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""226baec1-a91b-4d26-b18d-cebe0bd2c216"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""9ef5d7fc-4504-4646-ad28-84d3059ed36e"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""a8546345-eb6b-4976-a402-ee947c2e97d6"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""eb7d768e-9d49-4298-82bc-5aab247ce50a"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Run"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9c745bea-8b5f-4860-879a-58f818d25309"",
                    ""path"": ""<Keyboard>/capsLock"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Grapple"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f2f012a4-541c-4523-9f54-c270cc194d4e"",
                    ""path"": ""<Keyboard>/leftCtrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Dash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""5c5d5d6f-9e2a-4c2c-8358-8e20a47cd747"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveOnGrapple"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""9049ddd3-3f38-407c-a22d-3f18c4807336"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveOnGrapple"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""5be953a0-dd2c-424d-94fd-433d9a2ca399"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveOnGrapple"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""7c8aaf86-a62d-4b93-b75f-d030e4554a39"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveOnGrapple"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""87b8d9fb-1562-4bc6-b044-88e7b4bbaa41"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveOnGrapple"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""UI"",
            ""id"": ""ded0f207-7e4c-42e8-8834-cc891984d007"",
            ""actions"": [
                {
                    ""name"": ""Guide"",
                    ""type"": ""Button"",
                    ""id"": ""42a71a3e-28bf-410a-80ae-331df512c218"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a3f6befa-c964-4b56-91a5-2ff7d5d3ef75"",
                    ""path"": ""<Keyboard>/g"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Guide"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""AttackManagement"",
            ""id"": ""a639fdc9-bbea-4058-888f-d071370138b6"",
            ""actions"": [
                {
                    ""name"": ""NormalSkill"",
                    ""type"": ""Button"",
                    ""id"": ""abcc3104-ef3f-484a-b84f-7a5dfe0cc608"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""BlockSkill"",
                    ""type"": ""Button"",
                    ""id"": ""127383a1-0320-4158-a760-64db2650a9db"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""FirstSkill"",
                    ""type"": ""Button"",
                    ""id"": ""8a95c8a0-d056-49ef-831c-d742b6c009d5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SecondSkill"",
                    ""type"": ""Button"",
                    ""id"": ""7b70eec1-e98e-4b8a-a43b-2857c0101295"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ThirdSkill"",
                    ""type"": ""Button"",
                    ""id"": ""10bba002-4033-4eb3-a7ef-3885abbc3ce5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""62b171b8-c466-47f6-ab7d-c3a3a0ee4465"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""NormalSkill"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5a6425c0-200a-42cd-a82e-3c02032abdf0"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""BlockSkill"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""31b03377-6e7b-4368-8573-727eea2f405d"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""FirstSkill"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0bfd45d2-d40b-4816-ae40-107da9603d99"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SecondSkill"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8f64dffc-f0a2-4684-ba48-4309f68a80bd"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ThirdSkill"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // MovementManagement
        m_MovementManagement = asset.FindActionMap("MovementManagement", throwIfNotFound: true);
        m_MovementManagement_Movement = m_MovementManagement.FindAction("Movement", throwIfNotFound: true);
        m_MovementManagement_Jump = m_MovementManagement.FindAction("Jump", throwIfNotFound: true);
        m_MovementManagement_Run = m_MovementManagement.FindAction("Run", throwIfNotFound: true);
        m_MovementManagement_MoveOnGrapple = m_MovementManagement.FindAction("MoveOnGrapple", throwIfNotFound: true);
        m_MovementManagement_Grapple = m_MovementManagement.FindAction("Grapple", throwIfNotFound: true);
        m_MovementManagement_Dash = m_MovementManagement.FindAction("Dash", throwIfNotFound: true);
        // UI
        m_UI = asset.FindActionMap("UI", throwIfNotFound: true);
        m_UI_Guide = m_UI.FindAction("Guide", throwIfNotFound: true);
        // AttackManagement
        m_AttackManagement = asset.FindActionMap("AttackManagement", throwIfNotFound: true);
        m_AttackManagement_NormalSkill = m_AttackManagement.FindAction("NormalSkill", throwIfNotFound: true);
        m_AttackManagement_BlockSkill = m_AttackManagement.FindAction("BlockSkill", throwIfNotFound: true);
        m_AttackManagement_FirstSkill = m_AttackManagement.FindAction("FirstSkill", throwIfNotFound: true);
        m_AttackManagement_SecondSkill = m_AttackManagement.FindAction("SecondSkill", throwIfNotFound: true);
        m_AttackManagement_ThirdSkill = m_AttackManagement.FindAction("ThirdSkill", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // MovementManagement
    private readonly InputActionMap m_MovementManagement;
    private List<IMovementManagementActions> m_MovementManagementActionsCallbackInterfaces = new List<IMovementManagementActions>();
    private readonly InputAction m_MovementManagement_Movement;
    private readonly InputAction m_MovementManagement_Jump;
    private readonly InputAction m_MovementManagement_Run;
    private readonly InputAction m_MovementManagement_MoveOnGrapple;
    private readonly InputAction m_MovementManagement_Grapple;
    private readonly InputAction m_MovementManagement_Dash;
    public struct MovementManagementActions
    {
        private @PlayerInputActions m_Wrapper;
        public MovementManagementActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_MovementManagement_Movement;
        public InputAction @Jump => m_Wrapper.m_MovementManagement_Jump;
        public InputAction @Run => m_Wrapper.m_MovementManagement_Run;
        public InputAction @MoveOnGrapple => m_Wrapper.m_MovementManagement_MoveOnGrapple;
        public InputAction @Grapple => m_Wrapper.m_MovementManagement_Grapple;
        public InputAction @Dash => m_Wrapper.m_MovementManagement_Dash;
        public InputActionMap Get() { return m_Wrapper.m_MovementManagement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MovementManagementActions set) { return set.Get(); }
        public void AddCallbacks(IMovementManagementActions instance)
        {
            if (instance == null || m_Wrapper.m_MovementManagementActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MovementManagementActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @Run.started += instance.OnRun;
            @Run.performed += instance.OnRun;
            @Run.canceled += instance.OnRun;
            @MoveOnGrapple.started += instance.OnMoveOnGrapple;
            @MoveOnGrapple.performed += instance.OnMoveOnGrapple;
            @MoveOnGrapple.canceled += instance.OnMoveOnGrapple;
            @Grapple.started += instance.OnGrapple;
            @Grapple.performed += instance.OnGrapple;
            @Grapple.canceled += instance.OnGrapple;
            @Dash.started += instance.OnDash;
            @Dash.performed += instance.OnDash;
            @Dash.canceled += instance.OnDash;
        }

        private void UnregisterCallbacks(IMovementManagementActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @Run.started -= instance.OnRun;
            @Run.performed -= instance.OnRun;
            @Run.canceled -= instance.OnRun;
            @MoveOnGrapple.started -= instance.OnMoveOnGrapple;
            @MoveOnGrapple.performed -= instance.OnMoveOnGrapple;
            @MoveOnGrapple.canceled -= instance.OnMoveOnGrapple;
            @Grapple.started -= instance.OnGrapple;
            @Grapple.performed -= instance.OnGrapple;
            @Grapple.canceled -= instance.OnGrapple;
            @Dash.started -= instance.OnDash;
            @Dash.performed -= instance.OnDash;
            @Dash.canceled -= instance.OnDash;
        }

        public void RemoveCallbacks(IMovementManagementActions instance)
        {
            if (m_Wrapper.m_MovementManagementActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMovementManagementActions instance)
        {
            foreach (var item in m_Wrapper.m_MovementManagementActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MovementManagementActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MovementManagementActions @MovementManagement => new MovementManagementActions(this);

    // UI
    private readonly InputActionMap m_UI;
    private List<IUIActions> m_UIActionsCallbackInterfaces = new List<IUIActions>();
    private readonly InputAction m_UI_Guide;
    public struct UIActions
    {
        private @PlayerInputActions m_Wrapper;
        public UIActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Guide => m_Wrapper.m_UI_Guide;
        public InputActionMap Get() { return m_Wrapper.m_UI; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UIActions set) { return set.Get(); }
        public void AddCallbacks(IUIActions instance)
        {
            if (instance == null || m_Wrapper.m_UIActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_UIActionsCallbackInterfaces.Add(instance);
            @Guide.started += instance.OnGuide;
            @Guide.performed += instance.OnGuide;
            @Guide.canceled += instance.OnGuide;
        }

        private void UnregisterCallbacks(IUIActions instance)
        {
            @Guide.started -= instance.OnGuide;
            @Guide.performed -= instance.OnGuide;
            @Guide.canceled -= instance.OnGuide;
        }

        public void RemoveCallbacks(IUIActions instance)
        {
            if (m_Wrapper.m_UIActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IUIActions instance)
        {
            foreach (var item in m_Wrapper.m_UIActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_UIActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public UIActions @UI => new UIActions(this);

    // AttackManagement
    private readonly InputActionMap m_AttackManagement;
    private List<IAttackManagementActions> m_AttackManagementActionsCallbackInterfaces = new List<IAttackManagementActions>();
    private readonly InputAction m_AttackManagement_NormalSkill;
    private readonly InputAction m_AttackManagement_BlockSkill;
    private readonly InputAction m_AttackManagement_FirstSkill;
    private readonly InputAction m_AttackManagement_SecondSkill;
    private readonly InputAction m_AttackManagement_ThirdSkill;
    public struct AttackManagementActions
    {
        private @PlayerInputActions m_Wrapper;
        public AttackManagementActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @NormalSkill => m_Wrapper.m_AttackManagement_NormalSkill;
        public InputAction @BlockSkill => m_Wrapper.m_AttackManagement_BlockSkill;
        public InputAction @FirstSkill => m_Wrapper.m_AttackManagement_FirstSkill;
        public InputAction @SecondSkill => m_Wrapper.m_AttackManagement_SecondSkill;
        public InputAction @ThirdSkill => m_Wrapper.m_AttackManagement_ThirdSkill;
        public InputActionMap Get() { return m_Wrapper.m_AttackManagement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(AttackManagementActions set) { return set.Get(); }
        public void AddCallbacks(IAttackManagementActions instance)
        {
            if (instance == null || m_Wrapper.m_AttackManagementActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_AttackManagementActionsCallbackInterfaces.Add(instance);
            @NormalSkill.started += instance.OnNormalSkill;
            @NormalSkill.performed += instance.OnNormalSkill;
            @NormalSkill.canceled += instance.OnNormalSkill;
            @BlockSkill.started += instance.OnBlockSkill;
            @BlockSkill.performed += instance.OnBlockSkill;
            @BlockSkill.canceled += instance.OnBlockSkill;
            @FirstSkill.started += instance.OnFirstSkill;
            @FirstSkill.performed += instance.OnFirstSkill;
            @FirstSkill.canceled += instance.OnFirstSkill;
            @SecondSkill.started += instance.OnSecondSkill;
            @SecondSkill.performed += instance.OnSecondSkill;
            @SecondSkill.canceled += instance.OnSecondSkill;
            @ThirdSkill.started += instance.OnThirdSkill;
            @ThirdSkill.performed += instance.OnThirdSkill;
            @ThirdSkill.canceled += instance.OnThirdSkill;
        }

        private void UnregisterCallbacks(IAttackManagementActions instance)
        {
            @NormalSkill.started -= instance.OnNormalSkill;
            @NormalSkill.performed -= instance.OnNormalSkill;
            @NormalSkill.canceled -= instance.OnNormalSkill;
            @BlockSkill.started -= instance.OnBlockSkill;
            @BlockSkill.performed -= instance.OnBlockSkill;
            @BlockSkill.canceled -= instance.OnBlockSkill;
            @FirstSkill.started -= instance.OnFirstSkill;
            @FirstSkill.performed -= instance.OnFirstSkill;
            @FirstSkill.canceled -= instance.OnFirstSkill;
            @SecondSkill.started -= instance.OnSecondSkill;
            @SecondSkill.performed -= instance.OnSecondSkill;
            @SecondSkill.canceled -= instance.OnSecondSkill;
            @ThirdSkill.started -= instance.OnThirdSkill;
            @ThirdSkill.performed -= instance.OnThirdSkill;
            @ThirdSkill.canceled -= instance.OnThirdSkill;
        }

        public void RemoveCallbacks(IAttackManagementActions instance)
        {
            if (m_Wrapper.m_AttackManagementActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IAttackManagementActions instance)
        {
            foreach (var item in m_Wrapper.m_AttackManagementActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_AttackManagementActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public AttackManagementActions @AttackManagement => new AttackManagementActions(this);
    public interface IMovementManagementActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnRun(InputAction.CallbackContext context);
        void OnMoveOnGrapple(InputAction.CallbackContext context);
        void OnGrapple(InputAction.CallbackContext context);
        void OnDash(InputAction.CallbackContext context);
    }
    public interface IUIActions
    {
        void OnGuide(InputAction.CallbackContext context);
    }
    public interface IAttackManagementActions
    {
        void OnNormalSkill(InputAction.CallbackContext context);
        void OnBlockSkill(InputAction.CallbackContext context);
        void OnFirstSkill(InputAction.CallbackContext context);
        void OnSecondSkill(InputAction.CallbackContext context);
        void OnThirdSkill(InputAction.CallbackContext context);
    }
}
